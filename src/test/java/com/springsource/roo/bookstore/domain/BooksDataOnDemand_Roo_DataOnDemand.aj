// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.bookstore.domain;

import com.springsource.roo.bookstore.domain.AuthorDataOnDemand;
import com.springsource.roo.bookstore.domain.Books;
import com.springsource.roo.bookstore.domain.BooksDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BooksDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BooksDataOnDemand: @Component;
    
    private Random BooksDataOnDemand.rnd = new SecureRandom();
    
    private List<Books> BooksDataOnDemand.data;
    
    @Autowired
    AuthorDataOnDemand BooksDataOnDemand.authorDataOnDemand;
    
    public Books BooksDataOnDemand.getNewTransientBooks(int index) {
        Books obj = new Books();
        setContentType(obj, index);
        setCost(obj, index);
        setISBN(obj, index);
        setImage(obj, index);
        setQuantity(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void BooksDataOnDemand.setContentType(Books obj, int index) {
        String contentType = "contentType_" + index;
        obj.setContentType(contentType);
    }
    
    public void BooksDataOnDemand.setCost(Books obj, int index) {
        Float Cost = new Integer(index).floatValue();
        obj.setCost(Cost);
    }
    
    public void BooksDataOnDemand.setISBN(Books obj, int index) {
        String ISBN = "ISBN_" + index;
        obj.setISBN(ISBN);
    }
    
    public void BooksDataOnDemand.setImage(Books obj, int index) {
        byte[] image = String.valueOf(index).getBytes();
        obj.setImage(image);
    }
    
    public void BooksDataOnDemand.setQuantity(Books obj, int index) {
        Integer Quantity = new Integer(index);
        obj.setQuantity(Quantity);
    }
    
    public void BooksDataOnDemand.setTitle(Books obj, int index) {
        String Title = "Title_" + index;
        obj.setTitle(Title);
    }
    
    public Books BooksDataOnDemand.getSpecificBooks(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Books obj = data.get(index);
        Long id = obj.getId();
        return Books.findBooks(id);
    }
    
    public Books BooksDataOnDemand.getRandomBooks() {
        init();
        Books obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Books.findBooks(id);
    }
    
    public boolean BooksDataOnDemand.modifyBooks(Books obj) {
        return false;
    }
    
    public void BooksDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Books.findBooksEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Books' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Books>();
        for (int i = 0; i < 10; i++) {
            Books obj = getNewTransientBooks(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
