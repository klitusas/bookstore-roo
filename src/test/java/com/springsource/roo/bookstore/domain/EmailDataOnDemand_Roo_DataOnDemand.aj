// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.bookstore.domain;

import com.springsource.roo.bookstore.domain.Email;
import com.springsource.roo.bookstore.domain.EmailDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect EmailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EmailDataOnDemand: @Component;
    
    private Random EmailDataOnDemand.rnd = new SecureRandom();
    
    private List<Email> EmailDataOnDemand.data;
    
    public Email EmailDataOnDemand.getNewTransientEmail(int index) {
        Email obj = new Email();
        setFrom(obj, index);
        setSubject(obj, index);
        setText(obj, index);
        return obj;
    }
    
    public void EmailDataOnDemand.setFrom(Email obj, int index) {
        String from = "from_" + index;
        if (from.length() > 30) {
            from = from.substring(0, 30);
        }
        obj.setFrom(from);
    }
    
    public void EmailDataOnDemand.setSubject(Email obj, int index) {
        Integer subject = new Integer(index);
        obj.setSubject(subject);
    }
    
    public void EmailDataOnDemand.setText(Email obj, int index) {
        String text = "text_" + index;
        if (text.length() > 100) {
            text = text.substring(0, 100);
        }
        obj.setText(text);
    }
    
    public Email EmailDataOnDemand.getSpecificEmail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Email obj = data.get(index);
        Long id = obj.getId();
        return Email.findEmail(id);
    }
    
    public Email EmailDataOnDemand.getRandomEmail() {
        init();
        Email obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Email.findEmail(id);
    }
    
    public boolean EmailDataOnDemand.modifyEmail(Email obj) {
        return false;
    }
    
    public void EmailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Email.findEmailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Email' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Email>();
        for (int i = 0; i < 10; i++) {
            Email obj = getNewTransientEmail(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
