// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.roo.bookstore.domain;

import com.springsource.roo.bookstore.domain.Books;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Books_Roo_Finder {
    
    public static Long Books.countFindBooksesByTitleLike(String Title) {
        if (Title == null || Title.length() == 0) throw new IllegalArgumentException("The Title argument is required");
        Title = Title.replace('*', '%');
        if (Title.charAt(0) != '%') {
            Title = "%" + Title;
        }
        if (Title.charAt(Title.length() - 1) != '%') {
            Title = Title + "%";
        }
        EntityManager em = Books.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Books AS o WHERE LOWER(o.Title) LIKE LOWER(:Title)", Long.class);
        q.setParameter("Title", Title);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Books> Books.findBooksesByTitleLike(String Title) {
        if (Title == null || Title.length() == 0) throw new IllegalArgumentException("The Title argument is required");
        Title = Title.replace('*', '%');
        if (Title.charAt(0) != '%') {
            Title = "%" + Title;
        }
        if (Title.charAt(Title.length() - 1) != '%') {
            Title = Title + "%";
        }
        EntityManager em = Books.entityManager();
        TypedQuery<Books> q = em.createQuery("SELECT o FROM Books AS o WHERE LOWER(o.Title) LIKE LOWER(:Title)", Books.class);
        q.setParameter("Title", Title);
        return q;
    }
    
    public static TypedQuery<Books> Books.findBooksesByTitleLike(String Title, String sortFieldName, String sortOrder) {
        if (Title == null || Title.length() == 0) throw new IllegalArgumentException("The Title argument is required");
        Title = Title.replace('*', '%');
        if (Title.charAt(0) != '%') {
            Title = "%" + Title;
        }
        if (Title.charAt(Title.length() - 1) != '%') {
            Title = Title + "%";
        }
        EntityManager em = Books.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Books AS o WHERE LOWER(o.Title) LIKE LOWER(:Title)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Books> q = em.createQuery(queryBuilder.toString(), Books.class);
        q.setParameter("Title", Title);
        return q;
    }
    
}
